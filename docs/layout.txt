
View 计算自己尺寸时 4 类行为：
  Stack 之类的，尽可能让自己内部展示完整，但也不多要空间
  Text 之类的，返回自己需要的尺寸
  Shape 之类的，尽可能用光上面给的尺寸
  另外一些可能超出父视图

布局原则：
  当布局某个 view 时，其父 view 会给出一个建议的 size
  如果该 view 存在 child，那么就拿着这个建议的尺寸去问他的 child，child 根据自身的 behavior 返回一个 size，如果没有 child，则根据自身的 behavior 返回一个size
  用该 size 在其父 view 中进行布局

修改 frame，就相当于修改了父 view 建议的 size，然后，子 view 会非常聪明的根据这个 size 做一些事情
（注：本来父 view 给过来的尺寸非常大，子 view 能收到这个大尺寸，但中间插个 frame 调用，把这大尺寸给改了）

GeometryReader 主要功能：获取父 view 的 size

Alignment Guide 很难，没太搞懂



默认的 layout priority 是 0
分配空间时，VStack/HStack 先满足非贪婪视图（Text），再在贪婪视图间比较优先级
ZStack 里面包含几个视图，ZStack 的尺寸由优先级最高视图决定
    ZStack(alignment: .topTrailing) {
        Rectangle()
            .foregroundStyle(.red.opacity(0.8))
            .frame(width: 200, height: 200)
            .layoutPriority(1)
        Rectangle()
            .foregroundStyle(.blue.opacity(0.8))
            .frame(width: 100, height: 100)
            .layoutPriority(2)
        Rectangle()
            .foregroundStyle(.orange.opacity(0.8))
            .frame(width: 150, height: 150)
            .layoutPriority(2)
    }
    .border(Color.black, width: 5)

minWidth、idealWidth、maxWidth 一定要数值递增

ideal* 和 fixedSize 要搭配使用
  .frame(idealWidth: 300)
  .fixedSize(horizontal: true, vertical: false)

.frame(width: 200, height: 50, alignment: .bottomTrailing)
  修改此前内容在新 frame 下的位置
.background(alignment: .center) { Text("he") }
  设置内容的位置，如果是 Rectangle 这种撑满的，没啥效果

VStack(alignment: .trailing) {
  Text("aaa")
  Text("bbbbbb")
}
不会靠屏幕右



Text("abc")
  .border(Color.green)
  .offset(CGSize(width: 20, height: 25)) // 修改此前的位置，绿框和文字向右下移
  .border(Color.gray) // 后加的还是在旧位置

*** 感觉这代码有点问题，再研究研究 ***
ZStack { }
  .ignoresSafeArea() // 修改此前的安全区
  .overlay { Color.purple }  // 后加的不会撑到安全区

上面空白占 2/3，下面空白占 1/3
VStack {
    Spacer()
    Spacer()
    Text("Hello, world")
    Spacer()
}
