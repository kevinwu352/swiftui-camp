
https://www.hackingwithswift.com/swift/5.3/atmain
以前把 main.swift 当成入口，后来增加了 @main
此时，main 函数必须存在，但能写成异步同步等不同形式
@main
struct Main {
    static func main() async throws {
        print("hehe")
    }
}
main.swift 里在顶层能直接写异步调用，await some_func()

以后把 default 改成 @unknown default
switch error {
case .short:
    print("Your password was too short.")
case .obvious:
    print("Your password was too obvious.")
@unknown default:
    print("Your password wasn't suitable.")
}

Preview dir
/Users/kevin/Library/Developer/Xcode/UserData/Previews/Simulator Devices/1BC34D36-29AC-45B3-B44E-B8961F6EAB0B/data/Containers/Data/Application/232A9D4A-C1F6-4AE1-9E3F-DD988CA073FC



Hosting View
  LazyView<ContentView>
    ContentView
      Text

Text("god")
  hosting 全屏，其它都小

Text("god")
  .position(x: 50, y: 50)
  .background(Color.green)  // 颜色在 hosting 上面，且全屏
  hosting 全屏，lazy 和 content 在安全区内，其它都小



设置 separator insets
List {
    ForEach(0..<50) { i in
        HStack {
            Image(systemName: "heart.fill")
                .frame(width: 50, height: 50)
                .background(Color.gray)
            Text("\(i)")
                .frame(maxWidth: .infinity)
                .background(Color.gray)
                .alignmentGuide(.listRowSeparatorLeading) {
                    $0[.leading]
                }
                .alignmentGuide(.listRowSeparatorTrailing) {
                    $0[.trailing]
                }
        }
    }
}
.listStyle(.plain)



@Observable 有两成员，当 body 里用到 aaa，但我改变 bbb 时，不会刷新界面，body 也不会调用；当 aaa 多次赋相同值时，body 也会调用多次
ObservableObject，body 里用到 aaa，但我改变 bbb 时，界面会刷新；当 aaa 多次赋相同值时，body 也会调用多次


extension EnvironmentValues {
    @Entry var switcher = LoginSwitcher()
}
class LoginSwitcher {
    var god = 101
}
@Entry 后面的部分不是 Sendable，居然没报错




设背景色，Shape 上用 .fill(.red)，其它用 background(.red)
    Rectangle()
        // .fill(Color.purple)
        // .frame(width: 100, height: 100)
        .frame(width: 200, height: 200)
        .background(Color.red)
    直接设置背景色不行，先 fill 后 frame，再 frame 再 background

    Circle()
        .strokeBorder(.blue, lineWidth: 20) 画在内部
        //.stroke(.blue, lineWidth: 20) 骑在线上
        .frame(width: 100, height: 100)
        //.border(Color.yellow, width: 20) 画出正方形，不能用这个

// 感觉这是终极答案
    Image(.cart1)
        //.clipShape(RoundedRectangle(cornerRadius: 20)) // 后切会切掉阴影
        .background(
            RoundedRectangle(cornerRadius: 20)          // 圆角
                .fill(Color.green)                      // 背景色
                .strokeBorder(Color.red, lineWidth:4)   // 边框
                .shadow(color: .red, radius: 5)         // 阴影
                //.fill(.green.shadow(.drop(color: .red, radius: 5))) // 阴影还能直接加到颜色上面
        )

    //.clipShape(RoundedRectangle(cornerRadius: 20))
    //.shadow(color: .red, radius: 5) // 后加的阴影不会被切掉



https://www.cnblogs.com/bruce2077/p/14911951.html
diff 机制
当子视图实现了 == 方法而不表明 Equatable 时，系统仍会用自己的 diff 方式，子视图明确表明自己 Equatable 才会用自定义的 ==
如果子视图的 init 只有一个参数，即使表明 Equatable，也会用系统 diff
    ChildView(i: i, name: "fat")
    Button("i++") { i += 1 }
EquatableView 的用法，某个自定义的 View 符合 Equatable 协议
    EquatableView(content: WeatherView(weatherState: weatherState))
    WeatherView(weatherState: weatherState, i: 1).equatable()
个人感觉它的意义在于，自己定义子视图的比较，子视图可能有几个参数，我只比较某一些或一个，通过 == 方法，这样的话，其它属性的变化就不会导致此视图重建，相当于接管了 diff 模式的工作




========================================






